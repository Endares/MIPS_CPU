-- null
DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- addi $8, $0, 5              # $8 = 5 (value A) #0
0000 : 00101010000000000000000000000101;
    -- addi $9, $0, 10             # $9 = 10 (value B) #1
0001 : 00101010010000000000000000001010;
    -- addi $10, $0, 0             # $10 = 0 (result register) #2
0002 : 00101010100000000000000000000000;
    -- setx 2              # $30 = 2 ($rstatus, initialized to 0) #3
0003 : 10101000000000000000000000000010;
    -- bne $8, $9, 1               # If $8 != $9, branch to "addition" #4
0004 : 00010010000100100000000000000001;
    -- j 8                        # Otherwise, jump to "set rstatus" #5
0005 : 00001000000000000000000000001000;
    -- add $10, $8, $9             # $10 = $8 + $9# #6
0006 : 00000010100100001001000000000000;
    -- j 13                       # Jump to 12 function call #7
0007 : 00001000000000000000000000001101;
    -- addi $1, $0, 42                #8
0008 : 00101000010000000000000000101010;
    -- bne $8, $9, 1              # If $rstatus != 0, jump to "exception"  #9
0009 : 00010010000100100000000000000001;
    -- j 19                      # Otherwise, jump to the end of the program #10
0010 : 00001000000000000000000000010011;
    -- addi $10, $0, -1            # Set $10 = -1 to indicate error #11
0011 : 00101010100000011111111111111111;
    -- j 19                        # Jump to the end of the program #12 
0012 : 00001000000000000000000000010011;
    -- jal 17                      # Jump to "add" function and save return address #13
0013 : 00011000000000000000000000010001;
    -- addi $11,$11,6              #14
0014 : 00101010110101100000000000000110;
    -- addi $12,$11,7              #15
0015 : 00101011000101100000000000000111;
    -- j 19                        #16
0016 : 00001000000000000000000000010011;
    -- add $10, $8, $8             # $10 = $8 + $8 (example multiplication logic) #17
0017 : 00000010100100001000000000000000;
    -- jr $31                      # Return to the caller          #18
0018 : 00100111110000000000000000000000;
    -- bex 21                      #                               # 19
0019 : 10110000000000000000000000010101;
    -- addi $12,$11,7              #20
0020 : 00101011000101100000000000000111;
    -- setx 0          # nonsense                          #21
0021 : 10101000000000000000000000000000;
    -- bex 24         # will not branch($31 == 0)        #22
0022 : 10110000000000000000000000011000;
[0023 .. 4095] : 00000000000000000000000000000000;
END;
